proxy_cache_path /var/cache/nginx/proxy/[% TargetConfig %] levels=1:2 keys_zone=[% TargetConfig %]:10m inactive=60m;

server {
    server_name [% server_name %];
    root [% root %];
    index index.html index.htm;

    # Virtualmin Redirects
    if ($shouldRedirect) {
        return 301 $scheme://[% TargetConfig %]:$shouldRedirect$request_uri;
    }

    location /controlpanel {
        return 301 $scheme://[% TargetConfig %]:10000;
    }

    location / {
        proxy_cache [% TargetConfig %];
        proxy_no_cache 0;
        proxy_cache_bypass 0;

        # Define the cache key based on $scheme, $host, and $request_uri
        set $cache_key "$scheme://$host$request_uri";
        proxy_cache_key $cache_key;

        proxy_cache_valid 200 301 302 60m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout http_429 http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 1;
        proxy_cache_lock off;

        proxy_pass $scheme://apache_backend_${scheme}_[% ipUnderscore %];
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header X-Cache-Status $upstream_cache_status;
    }

    [% IF ssl_certificate %]
    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    proxy_ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256;                                                                                         
    proxy_ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256;        
    
    listen 443 ssl http2; # managed by Certbot
    ssl_certificate [% ssl_certificate %];
    ssl_certificate_key [% ssl_certificate_key %];
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    # Add these settings for better HTTP/2 support
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    [% ELSE %]
    listen 80;
    [% END %]

    include [% programPath %]/includes/basicProxy.conf;
    include [% programPath %]/includes/staticNonProxy.conf;
    include [% TargetConfig %]/*.conf;
}

[% IF ssl_certificate %]
server {
    # Redirect for admin
    if ($host = admin.[% TargetConfig %]) {
        return 301 https://[% TargetConfig %]:10000$request_uri;
    }

    # Redirect for webmail
    if ($host = webmail.[% TargetConfig %]) {
        return 301 https://[% TargetConfig %]:20000$request_uri;
    }

    # Force SSL.
    return 301 https://$host$request_uri;
    listen 80;
    server_name [% server_name %];
    return 404; # managed by Certbot
}
[% END %]

